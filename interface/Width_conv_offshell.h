/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

//#ifndef HZZ4L_ROOHIGHMASS
//#define HZZ4L_ROOHIGHMASS

#include "RooAbsPdf.h"
#include "RooSetProxy.h"
#include "RooRealProxy.h"
#include "RooRealVar.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include "TH3F.h"
#include "TH1.h"
#include "RooDataHist.h"
#include "RooHistFunc.h"
#include "TGraph.h"
#include "TSpline.h"
using namespace RooFit;

class Width_conv_offshell : public RooAbsPdf {
protected:

 RooRealProxy xreco;
 RooRealProxy mean;
 RooRealProxy width;
 RooRealProxy coupl;
  RooListProxy _coefList ;  //  List of funcficients
  TIterator* _coefIter ;    //! Iterator over funcficient lis 	
	double xgen_min;
	double xgen_max;
	double xreco_min;
	double xreco_max;
	double nbkg;
	double nsig;
	TGraph cosspline;
	TGraph sinspline;
	TGraph eff_bkg;
	TGraph eff_sig;
	double integral_store[1400];
	double bkgcont[1400];
	double coscont[1400];
	double sincont[1400];
	double eff_bkgcont[1400];
	double eff_sigcont[1400];
	double resoval[201][1400];
  Double_t evaluate() const ;
public:
  Width_conv_offshell() {} ; 
  Width_conv_offshell(const char *name, const char *title,
		       RooAbsReal& _xreco,
		       RooAbsReal& _mean,
		       RooAbsReal& _width,
		       RooAbsReal& _coupl,
			const RooArgList& inCoefList, TGraph _cosspline, TGraph _sinspline, TGraph effsig, TGraph effbkg); 
		    
  Width_conv_offshell(const Width_conv_offshell& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new Width_conv_offshell(*this,newname); }
  inline virtual ~Width_conv_offshell() {}
  
  Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
  Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;


private:

  ClassDef(Width_conv_offshell,1) // Your description goes here...
};
 
//#endif
